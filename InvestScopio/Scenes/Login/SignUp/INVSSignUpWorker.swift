//
//  LoginWorker.swift
//  InvestScopio
//
//  Created by Joao Medeiros Pereira on 12/06/19.
//  Copyright (c) 2019 Joao Medeiros Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase
import CryptoSwift

typealias PopMessageInfo = (title: String, message: String)
typealias SuccessSignUpHandler = (_ user: INVSUserModel, _ title: String,_ message: String, _ shouldHideAutomatically: Bool, _ popupType: INVSPopupMessageType) -> ()
typealias ErrorSignUpHandler = (_ titleError: String,_ messageError: String, _ shouldHideAutomatically: Bool, _ popupType: INVSPopupMessageType) ->()
typealias SignUpInvestScopioHandler = (_ syncronized: Bool, _ title: String,_ message:String, _ shouldHideAutomatically: Bool, _ popupType: INVSPopupMessageType) -> ()

protocol INVSSignUpWorkerProtocol {
    func signUp(withTextFields textFields: [INVSFloatingTextField], successCompletionHandler: @escaping(SuccessSignUpHandler), errorCompletionHandler:@escaping(ErrorSignUpHandler))
}

class INVSSignUpWorker: NSObject,INVSSignUpWorkerProtocol {
    func signUp(withTextFields textFields: [INVSFloatingTextField], successCompletionHandler: @escaping(SuccessSignUpHandler), errorCompletionHandler:@escaping(ErrorSignUpHandler)) {
        if let textFieldsError = check(withTextFields: textFields) {
            errorCompletionHandler(textFieldsError.title, textFieldsError.message, true, .error)
            return
        }
        if let email = textFields.filter({$0.typeTextField == .email}).first?.floatingTextField.text?.lowercased(), let password = textFields.filter({$0.typeTextField == .confirmPassword}).first?.floatingTextField.text {
            
            Auth.auth().createUser(withEmail: email, password: password) { (result, error) in
                guard result != nil else {
                    if let error = error {
                        if let firebaseErrorHandler = FireBaseErrorHandler.init(rawValue: error._code)?.getFirebaseError() {
                            errorCompletionHandler(firebaseErrorHandler.titleError, firebaseErrorHandler.messageError, firebaseErrorHandler.shouldHideAutomatically, firebaseErrorHandler.popupType)
                         return
                        }
                    }
                    errorCompletionHandler(INVSFloatingTextFieldType.defaultErrorTitle(), INVSFloatingTextFieldType.defaultErrorMessage(), true, .error)
                    return
                }
                
                //Signup API
                guard let uid = result?.user.uid else {
                    errorCompletionHandler(INVSFloatingTextFieldType.defaultErrorTitle(), INVSFloatingTextFieldType.defaultErrorMessage(), true, .error)
                    return
                }
                var userCreated = INVSUserModel(email: email, uid: uid)
                self.signUpInvestScopio(user: userCreated, signUpInvestScopioHandler: { (syncronized, title, message, shouldHideAutomatically, popupType) in
                    userCreated.syncronized = syncronized
                    successCompletionHandler(userCreated, "Finalizado.\n", "Seu cadastro foi realizado com sucesso!", true, .alert)
                    return
                })
            }
        }
    }
    
    func signUpInvestScopio(user: INVSUserModel, signUpInvestScopioHandler: @escaping(SignUpInvestScopioHandler)) {
        let headers = ["Content-Type": "application/json"]
        
        let userRequest = INVSUserRequest(email: user.email, password: user.uid)
        
        INVSConector.connector.request(withRoute: ConnectorRoutes.signup, method: .post, parameters: userRequest, responseClass: INVSSignUpModel.self, headers: headers, shouldRetry: true, successCompletion: { (decodable) in
            let signUpModel = decodable as? INVSSignUpModel
            signUpInvestScopioHandler(signUpModel?.syncronized ?? false, "Finalizado.\n", "Seu cadastro foi realizado com sucesso!", true, .alert)
        }) { (error) in
            signUpInvestScopioHandler(false, error.title, error.message, true, .alert)
        }
        
    }
    
    private func check(withTextFields textFields:[INVSFloatingTextField]) -> PopMessageInfo? {
        if let emailTextField = textFields.filter({$0.typeTextField == .email}).first {
            if emailTextField.floatingTextField.text?.isValidEmail() == false {
                if emailTextField.required {
                    emailTextField.hasError = true
                    emailTextField.floatingTextField.becomeFirstResponder()
                }
                return PopMessageInfo(title: emailTextField.typeTextField?.getTitleMessageInfo() ?? "", message: emailTextField.typeTextField?.getMessageInfo() ?? "")
            }
            emailTextField.hasError = false
        }
        if let passwordTextField = textFields.filter({$0.typeTextField == .password}).first, let confirmPasswordTextField = textFields.filter({$0.typeTextField == .confirmPassword}).first {
            if passwordTextField.floatingTextField.text != confirmPasswordTextField.floatingTextField.text {
                passwordTextField.hasError = true
                passwordTextField.floatingTextField.becomeFirstResponder()
                confirmPasswordTextField.hasError = true
                return PopMessageInfo(title: confirmPasswordTextField.typeTextField?.getTitleMessageInfo() ?? "", message: confirmPasswordTextField.typeTextField?.getMessageInfo() ?? "")
            }
            passwordTextField.hasError = false
            confirmPasswordTextField.hasError = false
        }
        return nil
    }
    
    
}
