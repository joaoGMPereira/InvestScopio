//
//  LoginViewController.swift
//  InvestScopio
//
//  Created by Joao Medeiros Pereira on 12/06/19.
//  Copyright (c) 2019 Joao Medeiros Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie
import Firebase

protocol INVSLoginViewControllerProtocol: class {
    func displayOkAction(withTextField textField: INVSFloatingTextField, andShouldResign shouldResign: Bool)
    func displayCancelAction()
    func displaySignInSuccess(withEmail email: String, security: String)
    func displaySignInError(titleError:String, messageError:String, shouldHideAutomatically:Bool, popupType:INVSPopupMessageType)
}

class INVSLoginViewController: INVSPresentBaseViewController {
    var textFieldStackView = UIStackView(frame: .zero)
    var emailTextField = INVSFloatingTextField(frame: .zero)
    var passwordTextField = INVSFloatingTextField(frame: .zero)
    var titleLabel = UILabel(frame: .zero)
    var buttonStackView = UIStackView(frame: .zero)
    var loginButton = INVSLoadingButton(frame: .zero)
    var createButton = UIButton(frame: .zero)
    var resendPasswordButton = UIButton(frame: .zero)
    var offlineButton = UIButton(frame: .zero)
    var rememberStackView = UIStackView(frame: .zero)
    var rememberLabel = UILabel(frame: .zero)
    var rememberSwitch = UISwitch(frame: .zero)
    var animationView = AnimationView()
    var titleTopConstraint = NSLayoutConstraint()
    var popupMessage: INVSPopupMessage?

    var interactor: INVSLoginInteractorProtocol?
    var router: INVSRoutingLogic?
    var handle: AuthStateDidChangeListenerHandle?

    // MARK: Setup
    private func setup() {
        let viewController = self
        let interactor = INVSLoginInteractor()
        let presenter = INVSLoginPresenter()
        let router = INVSRouter()
        interactor.allTextFields = [emailTextField, passwordTextField]
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationBarTitle = "Login"
        closeButton.isHidden = true
        setup()
        setupView()
        setupUI()
        closeClosure = { () -> () in
            self.router?.routeToSimulator()
        }
        handle = Auth.auth().addStateDidChangeListener { (auth, user) in
            
        }
    }
    
    func selectServer() {
        let alertController = UIAlertController(title: "Escolha o ambiente", message: "Por default o ambiente do Heroku caso cancele.", preferredStyle: .actionSheet)
        
        let action1 = UIAlertAction(title: "Local", style: .default) { (action:UIAlertAction) in
            INVSSession.session.callService = .localHost
        }
        
        let action2 = UIAlertAction(title: "Heroku", style: .default) { (action:UIAlertAction) in
            INVSSession.session.callService = .heroku
        }
        
        let action3 = UIAlertAction(title: "Offline", style: .default) { (action:UIAlertAction) in
            INVSSession.session.callService = .offline
        }
        
        let action4 = UIAlertAction(title: "Cancelar", style: .cancel) { (action:UIAlertAction) in
            INVSSession.session.callService = .heroku
            alertController.dismiss(animated: true, completion: nil)
        }
        
        alertController.addAction(action1)
        alertController.addAction(action2)
        alertController.addAction(action3)
        alertController.addAction(action4)
        self.present(alertController, animated: true, completion: nil)
    }
    
    override func viewDidLayoutSubviews() {
        titleTopConstraint.constant = animationView.center.y
        createButton.layer.cornerRadius = 25
        createButton.layer.borderColor = UIColor.INVSDefault().cgColor
        createButton.layer.borderWidth = 2
        loginButton.setupFillGradient(title: "Login")
        checkUserSavedEmail()
        view.layoutIfNeeded()
        super.viewDidLayoutSubviews()
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        if INVSSession.session.isDev() {
            selectServer()
        }
    }
    
    public override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        
        if let handle = handle {
            Auth.auth().removeStateDidChangeListener(handle)
        }
    }
    
    func checkUserSavedEmail() {
        if let email = INVSKeyChainWrapper.retrieve(withKey: INVSConstants.LoginKeyChainConstants.lastLoginEmail.rawValue), let emailDecrypted = INVSCrypto.decryptAES(withText: email) {
            emailTextField.textFieldTitle = emailDecrypted
        }
        if let enableAuthentication =
            INVSKeyChainWrapper.retrieveBool(withKey: INVSConstants.LoginKeyChainConstants.hasEnableBiometricAuthentication.rawValue) {
            rememberSwitch.setOn(enableAuthentication, animated: true)
        }
    }
    
    
    //MARK: SetupUI
    func setupUI() {
        popupMessage = INVSPopupMessage(parentViewController: self)
        popupMessage?.delegate = self
        textFieldStackView.addArrangedSubview(emailTextField)
        textFieldStackView.addArrangedSubview(passwordTextField)
        textFieldStackView.axis = .vertical
        textFieldStackView.distribution = .fillEqually
        INVSFloatingTextFieldType.email.setupTextField(withTextField: emailTextField,keyboardType: .emailAddress, andDelegate: self, valueTypeTextField: .none, isRequired: true)
        emailTextField.floatingTextField.autocapitalizationType = .none
        INVSFloatingTextFieldType.password.setupTextField(withTextField: passwordTextField,keyboardType: .default, andDelegate: self, valueTypeTextField: .none, isRequired: true)
        passwordTextField.floatingTextField.isSecureTextEntry = true
        let logoAnimation = Animation.named("animatedLogo")
        animationView.animation = logoAnimation
        animationView.contentMode = .scaleAspectFit
        animationView.animationSpeed = 1.0
        animationView.loopMode = .playOnce
        animationView.play(fromFrame: 55, toFrame: 55)
        titleLabel.textColor = .INVSBlack()
        titleLabel.font = .INVSFontBigBold()
        titleLabel.text = "InvestScopio"
        titleLabel.textAlignment = .center
        setupRemember()
        setupButtons()
    }
    
    func setupRemember() {
        rememberLabel.text = "Salvar dados?"
        rememberLabel.textColor = .INVSBlack()
        rememberLabel.font = .INVSFontDefaultBold()
        rememberSwitch.tintColor = .INVSDefault()
        rememberSwitch.onTintColor = .INVSDefault()
        rememberStackView.addArrangedSubview(rememberLabel)
        rememberStackView.addArrangedSubview(rememberSwitch)
        rememberStackView.axis = .horizontal
        rememberStackView.spacing = 8
        rememberStackView.distribution = .fillProportionally
    }
    
    func setupButtons() {
        buttonStackView.addArrangedSubview(createButton)
        buttonStackView.addArrangedSubview(loginButton)
        buttonStackView.axis = .horizontal
        buttonStackView.spacing = 8
        buttonStackView.distribution = .fillEqually
        view.layoutIfNeeded()
        createButton.setTitle("Cadastrar", for: .normal)
        createButton.setTitleColor(.INVSDefault(), for: .normal)
        createButton.addTarget(self, action: #selector(INVSLoginViewController.createAction(_:)), for: .touchUpInside)
        let underlineAttributes: [NSAttributedString.Key: Any] = [
            .font: UIFont.INVSFontDefaultBold(),
            .foregroundColor: UIColor.INVSDefault(),
            .underlineStyle: NSUnderlineStyle.single.rawValue]
        resendPasswordButton.setAttributedTitle(NSAttributedString.init(string: "Esqueceu sua Senha?", attributes: underlineAttributes), for: .normal)
        resendPasswordButton.addTarget(self, action: #selector(INVSLoginViewController.resendPasswordAction(_:)), for: .touchUpInside)
        
        offlineButton.setAttributedTitle(NSAttributedString.init(string: "Acesso sem Login", attributes: underlineAttributes), for: .normal)
        offlineButton.addTarget(self, action: #selector(INVSLoginViewController.offlineAction(_:)), for: .touchUpInside)
        loginAction()
    }
    
    func loginAction() {
        loginButton.buttonAction = {(button) -> () in
            self.loginButton.showLoading()
            self.interactor?.logIn(rememberMe: self.rememberSwitch.isOn)
        }
    }
    
    @objc func createAction(_ sender: UIButton) {
       let signUpViewController = INVSSignUpViewController.init(nibName: INVSSignUpViewController.toString(), bundle: Bundle(for: INVSSignUpViewController.self))
        signUpViewController.delegate = self
        signUpViewController.view.frame = view.bounds
        signUpViewController.modalPresentationStyle = .overCurrentContext
        signUpViewController.view.backgroundColor = .clear
        present(signUpViewController, animated: true)
    }
    
    @objc func offlineAction(_ sender: UIButton) {
        let offlineViewController = INVSAlertViewController()
        offlineViewController.setup(withHeight: 140, andWidth: 300, andCornerRadius: 8, andContentViewColor: .white)
        offlineViewController.titleAlert = INVSConstants.OfflineViewController.title.rawValue
        offlineViewController.messageAlert = INVSConstants.OfflineViewController.message.rawValue
        offlineViewController.view.frame = view.bounds
        offlineViewController.modalPresentationStyle = .overCurrentContext
        offlineViewController.view.backgroundColor = .clear
        present(offlineViewController, animated: true, completion: nil)
        offlineViewController.confirmCallback = { (button) -> () in
            self.dismiss(animated: true) {
                self.router?.routeToSimulator()
            }
        }
        
    }
    
    @objc func resendPasswordAction(_ sender: UIButton) {
        let resendPasswordViewController = INVSResendPasswordViewController.init(nibName: INVSResendPasswordViewController.toString(), bundle: Bundle(for: INVSResendPasswordViewController.self))
        resendPasswordViewController.view.frame = view.bounds
        resendPasswordViewController.modalPresentationStyle = .overCurrentContext
        resendPasswordViewController.view.backgroundColor = .clear
        present(resendPasswordViewController, animated: true)
    }
}

extension INVSLoginViewController: INVSPopupMessageDelegate {
    func didFinishDismissPopupMessage(withPopupMessage popupMessage: INVSPopupMessage) {
    }
}

extension INVSLoginViewController: INVSSignUpViewControllerDelegate {
    func didSignUp(withEmail email: String) {
        emailTextField.textFieldTitle = email
    }
}

extension INVSLoginViewController: INVSFloatingTextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: INVSFloatingTextField) {
        self.popupMessage?.hide()
    }
    func toolbarAction(_ textField: INVSFloatingTextField, typeOfAction type: INVSKeyboardToolbarButton) {
        interactor?.checkToolbarAction(withTextField: textField, typeOfAction: type)
    }
    
    func infoButtonAction(_ textField: INVSFloatingTextField) {
        view.endEditing(true)
    }
    
}

extension INVSLoginViewController: INVSLoginViewControllerProtocol {
    func displaySignInSuccess(withEmail email: String, security: String) {
        enableBiometric(withEmail: email, security: security)
    }
    
    func enableBiometric(withEmail email: String, security: String) {
        if self.rememberSwitch.isOn {
            let biometricViewController = INVSAlertViewController()
            biometricViewController.setup(withHeight: 200, andWidth: 300, andCornerRadius: 8, andContentViewColor: .white)
            biometricViewController.titleAlert = INVSConstants.EnableBiometricViewController.title.rawValue
            biometricViewController.messageAlert = INVSConstants.EnableBiometricViewController.biometricMessageType()
            biometricViewController.view.frame = view.bounds
            biometricViewController.modalPresentationStyle = .overCurrentContext
            biometricViewController.view.backgroundColor = .clear
            present(biometricViewController, animated: true, completion: nil)
            biometricViewController.confirmCallback = { (button) -> () in
                self.dismiss(animated: true) {
                    self.rememberUser(withRememberMe: self.rememberSwitch.isOn, email: email, security: security)
                    self.loginButton.hideLoading()
                    self.router?.routeToSimulator()
                }
            }
            biometricViewController.cancelCallback = { (button) -> () in
                self.loginButton.hideLoading()
                self.rememberSwitch.setOn(false, animated: true)
            }
        } else {
            INVSKeyChainWrapper.clear()
            self.rememberUser(withRememberMe: self.rememberSwitch.isOn, email: email, security: security)
            self.loginButton.hideLoading()
            self.router?.routeToSimulator()
        }
    }
    
    func rememberUser(withRememberMe rememberMe: Bool, email: String, security: String) {
        INVSKeyChainWrapper.saveBool(withValue: rememberMe, andKey: INVSConstants.LoginKeyChainConstants.hasEnableBiometricAuthentication.rawValue)
        if let emailAES = INVSCrypto.encryptAES(withText: email), let securityAES = INVSCrypto.encryptAES(withText: security) {
            INVSKeyChainWrapper.save(withValue: emailAES, andKey: INVSConstants.LoginKeyChainConstants.lastLoginEmail.rawValue)
            INVSKeyChainWrapper.save(withValue: securityAES, andKey: INVSConstants.LoginKeyChainConstants.lastLoginSecurity.rawValue)
        }
    }
    
    func displaySignInError(titleError: String, messageError: String, shouldHideAutomatically: Bool, popupType: INVSPopupMessageType) {
        self.loginButton.hideLoading()
        popupMessage?.show(withTextMessage: messageError, title: titleError, popupType: popupType, shouldHideAutomatically: shouldHideAutomatically)
    }
    
    func displayOkAction(withTextField textField: INVSFloatingTextField, andShouldResign shouldResign: Bool) {
        textField.floatingTextField.becomeFirstResponder()
        if shouldResign {
            loginButton.showLoading()
            interactor?.logIn(rememberMe: rememberSwitch.isOn)
            view.endEditing(shouldResign)
        }
    }
    
    func displayCancelAction() {
        view.endEditing(true)
    }
}

extension INVSLoginViewController: INVSCodeView {
    func buildViewHierarchy() {
        view.addSubview(animationView)
        view.sendSubviewToBack(animationView)
        view.addSubview(titleLabel)
        view.addSubview(textFieldStackView)
        view.addSubview(rememberStackView)
        view.addSubview(resendPasswordButton)
        view.addSubview(offlineButton)
        view.addSubview(buttonStackView)
        view.translatesAutoresizingMaskIntoConstraints = false
        textFieldStackView.translatesAutoresizingMaskIntoConstraints = false
        animationView.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
        rememberStackView.translatesAutoresizingMaskIntoConstraints = false
        resendPasswordButton.translatesAutoresizingMaskIntoConstraints = false
        offlineButton.translatesAutoresizingMaskIntoConstraints = false
        buttonStackView.translatesAutoresizingMaskIntoConstraints = false
    }
    
    func setupConstraints() {
        titleTopConstraint =  titleLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 0)
        var centerYAnimationView = -(view.frame.height * 0.5)
        centerYAnimationView = centerYAnimationView < -280 ? -280 : centerYAnimationView
        NSLayoutConstraint.activate([
            animationView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor,constant: 0),
            animationView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: centerYAnimationView)
            ])
        NSLayoutConstraint.activate([
            titleLabel.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor,constant: 16),
            titleLabel.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor,constant: -16),
            titleLabel.bottomAnchor.constraint(equalTo: textFieldStackView.topAnchor,constant: 8),
            titleTopConstraint,
            titleLabel.heightAnchor.constraint(equalToConstant: 40)
            ])
        NSLayoutConstraint.activate([
            textFieldStackView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 30),
            textFieldStackView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -30),
            textFieldStackView.heightAnchor.constraint(equalToConstant: 100)
            ])
        
        NSLayoutConstraint.activate([
            rememberStackView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor,constant: -30),
            rememberStackView.topAnchor.constraint(equalTo: textFieldStackView.bottomAnchor,constant: 8),
            rememberStackView.heightAnchor.constraint(equalToConstant: 30)
            ])
        
        NSLayoutConstraint.activate([
            resendPasswordButton.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor,constant: 16),
            resendPasswordButton.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor,constant: -16),
            resendPasswordButton.topAnchor.constraint(equalTo: rememberStackView.bottomAnchor,constant: 8),
            resendPasswordButton.heightAnchor.constraint(equalToConstant: 30)
            ])
        
        NSLayoutConstraint.activate([
            offlineButton.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor,constant: 16),
            offlineButton.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor,constant: -16),
            offlineButton.topAnchor.constraint(equalTo: resendPasswordButton.bottomAnchor,constant: 8),
            offlineButton.heightAnchor.constraint(equalToConstant: 30)
            ])
        
        NSLayoutConstraint.activate([
            buttonStackView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor,constant: 16),
            buttonStackView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor,constant: -16),
            buttonStackView.topAnchor.constraint(equalTo: offlineButton.bottomAnchor,constant: 16),
            buttonStackView.heightAnchor.constraint(equalToConstant: 50)
            ])
        self.view.layoutIfNeeded()
    }
    
    func setupAdditionalConfiguration() {
        view.backgroundColor = .INVSLightGray()
    }
    
    
}
