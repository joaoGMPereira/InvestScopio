//
//  LoginViewController.swift
//  InvestScopio
//
//  Created by Joao Medeiros Pereira on 12/06/19.
//  Copyright (c) 2019 Joao Medeiros Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Lottie
protocol INVSLoginViewControllerProtocol: class {
    func displayOkAction(withTextField textField: INVSFloatingTextField, andShouldResign shouldResign: Bool)
    func displayCancelAction()
}

class INVSLoginViewController: INVSPresentBaseViewController {
    var interactor: INVSLoginInteractorProtocol?
    var router: INVSRoutingLogic?
    var stackView = UIStackView(frame: .zero)
    var emailTextField = INVSFloatingTextField(frame: .zero)
    var passwordTextField = INVSFloatingTextField(frame: .zero)
    var titleLabel = UILabel(frame: .zero)
    var animationView = AnimationView()
    var titleTopConstraint = NSLayoutConstraint()


    // MARK: Setup
    private func setup()
    {
    let viewController = self
    let interactor = INVSLoginInteractor()
    let presenter = INVSLoginPresenter()
    let router = INVSRouter()
    interactor.allTextFields = [emailTextField, passwordTextField]
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    }

    // MARK: View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        navigationBarTitle = "Login"
        setup()
        setupView()
        setupUI()
        closeClosure = { () -> () in
            self.router?.routeToSimulator()
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        titleTopConstraint.constant = animationView.center.y
        view.layoutIfNeeded()
    }
    
    //MARK: SetupUI
    func setupUI() {
        stackView.addArrangedSubview(emailTextField)
        stackView.addArrangedSubview(passwordTextField)
        stackView.axis = .vertical
        stackView.distribution = .fillEqually
        INVSFloatingTextFieldType.email.setupTextField(withTextField: emailTextField,keyboardType: .emailAddress, andDelegate: self, valueTypeTextField: .none, isRequired: true)
        INVSFloatingTextFieldType.password.setupTextField(withTextField: passwordTextField,keyboardType: .default, andDelegate: self, valueTypeTextField: .none, isRequired: true)
        passwordTextField.floatingTextField.isSecureTextEntry = true
        let logoAnimation = Animation.named("animatedLogo")
        animationView.animation = logoAnimation
        animationView.contentMode = .scaleAspectFit
        animationView.animationSpeed = 1.0
        animationView.loopMode = .playOnce
        animationView.play(fromFrame: 55, toFrame: 55)
        titleLabel.textColor = .INVSBlack()
        titleLabel.font = .INVSFontBigBold()
        titleLabel.text = "InvestScopio"
        titleLabel.textAlignment = .center
    }
}

extension INVSLoginViewController: INVSFloatingTextFieldDelegate {
    func textFieldDidBeginEditing(_ textField: INVSFloatingTextField) {
//        self.popupMessage?.hide()
    }
    func toolbarAction(_ textField: INVSFloatingTextField, typeOfAction type: INVSKeyboardToolbarButton) {
        interactor?.checkToolbarAction(withTextField: textField, typeOfAction: type)
    }
    
    func infoButtonAction(_ textField: INVSFloatingTextField) {
        view.endEditing(true)
//        interactor?.showInfo(withSender: textField)
    }
    
}

extension INVSLoginViewController: INVSLoginViewControllerProtocol {
    func displayOkAction(withTextField textField: INVSFloatingTextField, andShouldResign shouldResign: Bool) {
        textField.floatingTextField.becomeFirstResponder()
        if shouldResign {
            //interactor?.simulationProjection()
            view.endEditing(shouldResign)
        }
    }
    
    func displayCancelAction() {
        view.endEditing(true)
    }
}

extension INVSLoginViewController: INVSCodeView {
    func buildViewHierarchy() {
        view.addSubview(animationView)
        view.sendSubviewToBack(animationView)
        view.addSubview(titleLabel)
        view.addSubview(stackView)
        view.translatesAutoresizingMaskIntoConstraints = false
        stackView.translatesAutoresizingMaskIntoConstraints = false
        animationView.translatesAutoresizingMaskIntoConstraints = false
        titleLabel.translatesAutoresizingMaskIntoConstraints = false
    }
    
    func setupConstraints() {
        titleTopConstraint =  titleLabel.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 0)
        var centerYAnimationView = -(view.frame.height * 0.5)
        centerYAnimationView = centerYAnimationView < -280 ? -280 : centerYAnimationView
        NSLayoutConstraint.activate([
            stackView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor, constant: 30),
            stackView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor, constant: -30),
            stackView.heightAnchor.constraint(equalToConstant: 100)
            ])
        
        NSLayoutConstraint.activate([
            animationView.centerXAnchor.constraint(equalTo: view.safeAreaLayoutGuide.centerXAnchor,constant: 0),
            animationView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: centerYAnimationView)
            ])
        NSLayoutConstraint.activate([
            titleLabel.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor,constant: 16),
            titleLabel.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor,constant: -16),
            titleLabel.bottomAnchor.constraint(equalTo: stackView.topAnchor,constant: 8),
            titleTopConstraint,
            titleLabel.heightAnchor.constraint(equalToConstant: 40)
            ])
        animationView.layoutIfNeeded()
    }
    
    func setupAdditionalConfiguration() {
        view.backgroundColor = .white
    }
    
    
}
