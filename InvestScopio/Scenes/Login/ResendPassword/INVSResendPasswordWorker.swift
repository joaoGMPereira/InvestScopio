//
//  LoginWorker.swift
//  InvestScopio
//
//  Created by Joao Medeiros Pereira on 12/06/19.
//  Copyright (c) 2019 Joao Medeiros Pereira. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Firebase

typealias PopMessageResendPasswordInfo = (title: String, message: String)
typealias SuccessResendPasswordHandler = (_ email:String, _ title:String,_ message:String, _ shouldHideAutomatically:Bool, _ popupType:INVSPopupMessageType) -> ()
typealias ErrorResendPasswordHandler = (_ titleError:String,_ messageError:String, _ shouldHideAutomatically:Bool, _ popupType:INVSPopupMessageType) ->()

protocol INVSResendPasswordWorkerProtocol {
    func resendPassword(withTextFields textFields: [INVSFloatingTextField], successCompletionHandler: @escaping(SuccessResendPasswordHandler), errorCompletionHandler:@escaping(ErrorResendPasswordHandler))
}

class INVSResendPasswordWorker: NSObject,INVSResendPasswordWorkerProtocol {
    func resendPassword(withTextFields textFields: [INVSFloatingTextField], successCompletionHandler: @escaping(SuccessResendPasswordHandler), errorCompletionHandler:@escaping(ErrorResendPasswordHandler)) {
        if let textFieldsError = check(withTextFields: textFields) {
            errorCompletionHandler(textFieldsError.title, textFieldsError.message, true, .error)
            return
        }
        if let email = textFields.filter({$0.typeTextField == .email}).first?.floatingTextField.text?.lowercased() {
            Auth.auth().sendPasswordReset(withEmail: email) { (error) in
                if error != nil {
                    errorCompletionHandler(INVSFloatingTextFieldType.defaultErrorTitle(), INVSFloatingTextFieldType.defaultErrorMessage(), true, .error)
                    return
                }
                successCompletionHandler(email, "Atenção.\n", "Foi enviado um email para seu email cadastrado para que você crie uma nova senha.", true, .alert)
                return
            }
        }
    }
    private func check(withTextFields textFields:[INVSFloatingTextField]) -> PopMessageResendPasswordInfo? {
        if let emailTextField = textFields.filter({$0.typeTextField == .email}).first {
            if emailTextField.floatingTextField.text?.isValidEmail() == false {
                if emailTextField.required {
                    emailTextField.hasError = true
                    emailTextField.floatingTextField.becomeFirstResponder()
                }
                return PopMessageInfo(title: emailTextField.typeTextField?.getTitleMessageInfo() ?? "", message: emailTextField.typeTextField?.getMessageInfo() ?? "")
            }
            emailTextField.hasError = false
        }
        return nil
    }
}
